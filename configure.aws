#!/bin/bash -x

export AWS_MAGIC_IP=169.254.169.254

print_usage() {
    echo "USAGE: configure.aws EC2_PRIVATE_KEY EC2_CERT SLURM_CONF NODES_CONF"
}

get_hosts_for_reservation() {
    local EC2_DATA=$1
    local OUT_FILE=$2
    local RESERVATION_ID=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/reservation-id`
    # collect instances in our reservation
    # by collecting the lines starting w/ our RESERVATION_ID and
    # the next occurance of the token 'RESERVATION'
    sed -n "/$RESERVATION_ID/,/RESERVATION/p" $EC2_DATA |grep INSTANCE > $OUT_FILE
}

sleep_while_pending() {
    local EC2_PRIVATE_KEY=$1
    local EC2_CERT=$2
    local RESERVATION_ID=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/reservation-id`
    printf "waiting for other hosts to boot."
    while [ ! `ec2din -K $EC2_PRIVATE_KEY -C $EC2_CERT|sed -n "/$RESERVATION_ID/,/RESERVATION/p"|grep INSTANCE|grep pending|wc -l` -eq 0 ]; do
        printf "."
        sleep 5
    done
    echo
}

get_max_launch_index() {
    local EC2_DATA=$1
    local SCRATCH=`mktemp`
    get_hosts_for_reservation $EC2_DATA $SCRATCH
    NC=`awk 'BEGIN { mv = 0 }{if($8 > mv) { mv = $8 } } END { print mv }' $SCRATCH`
    rm $SCRATCH
    echo $NC
}

get_control_node() {
    local EC2_DATA=$1
    local SCRATCH=`mktemp`
    get_hosts_for_reservation $EC2_DATA $SCRATCH
    CONTROL_NODE=`awk '{if($8 == 0) { gsub(/\..*$/,"",$5); print $5 } }' $SCRATCH`
    rm $SCRATCH
    echo $CONTROL_NODE
}

generate_hosts_file() {
    local EC2_DATA=$1
    local OUT_FILE=$2
    local RESERVATION_ID=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/reservation-id`
    local HOST_IP=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/local-ipv4`
    local HOST_NAME_FQDN=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/local-hostname`
    local HOST_NAME=`wget -q -O - http://$AWS_MAGIC_IP/latest/meta-data/local-hostname|cut -d. -f1`
    local SCRATCH=`mktemp`

    get_hosts_for_reservation $EC2_DATA $SCRATCH
    sed -i "/$HOST_NAME/d" $SCRATCH
    echo "127.0.0.1 localhost" > $OUT_FILE
    echo "127.0.0.1 $HOST_NAME_FQDN $HOST_NAME" >> $OUT_FILE
    cat $SCRATCH|awk  '{fqdn=$5; gsub(/\..*$/,"",$5); print $18" "fqdn" "$5;}' >> $OUT_FILE
    rm $SCRATCH
}

set_slurm_controller() {
    local EC2_DATA=$1
    local SLURM_CONF_FILE=$2
    local CONTROL_NODE=`get_control_node $EC2_DATA`
    sed -i "s/ControlMachine.*$/ControlMachine=$CONTROL_NODE/g" $SLURM_CONF_FILE
}

generate_slurm_node_conf_file() {
    local EC2_DATA=$1
    local OUT_FILE=$2
    local NODE_COUNT=`get_max_launch_index $EC2_DATA`
    local SCRATCH=`mktemp`
    get_hosts_for_reservation $EC2_DATA $SCRATCH
    cat $SCRATCH|awk '{fqdn=$5; gsub(/\..*$/,"",$5); print "NodeName=node"$8" NodeHostname="$5" NodeAddr="fqdn}' > $OUT_FILE
    rm -f $SCRATCH

    if [ $NODE_COUNT -gt 0 ]
    then
        echo "PartitionName=prod Nodes=node[0-$NODE_COUNT] Default=YES MaxTime=INFINITE State=UP" >> $OUT_FILE;
    else
        echo "PartitionName=prod Nodes=node0 Default=YES MaxTime=INFINITE State=UP" >> $OUT_FILE;
    fi
}

configure_aws() {
    local EC2_PRIVATE_KEY=$1
    local EC2_CERT=$2
    local SLURM_CONF=$3
    local NODES_CONF=$4
    local EC2_DATA=`mktemp`
    ec2din -K $EC2_PRIVATE_KEY -C $EC2_CERT --show-empty-fields > $EC2_DATA
    generate_hosts_file $EC2_DATA /etc/hosts
    set_slurm_controller $EC2_DATA $SLURM_CONF
    generate_slurm_node_conf_file $EC2_DATA $NODES_CONF
    rm -f $EC2_DATA
    sleep_while_pending $EC2_PRIVATE_KEY $EC2_CERT
}
